2022. 12. 16 
[이론] 자바스크립트 변수 정의 과정

-- 목차 --
1. 자바스크립트 변수 정의 과정
2. 자바스크립트 Hosting
3. 자바스크립트 내장 객체1
4. 자바스크립트 내장 객체2
5. 자바스크립트 내장 객체3
-------------------------------

1. 자바스크립트 변수 정의 과정
- 자바스크립트 엔진은 자바스크립트 코드를 읽어 실행하는 프로그램. (자바스크립트가 컴파일러 역할)
- 작성한 자바스크립트 코드는 자바스크립트 엔진을 통해 파싱되고 실행. 
- Chrome 브라우저는 V8엔진(google이 만듬)을 사용. 

* node.js
- node.js는 브라우저 외의 환경에서 자바스크립트 코드를 싱행하도록 하는 프로그램
- node.js는 여러 프로그램을 구성. 자바스크립트 코드를 읽는 프로그램으로 V8 사용
- 브라우저 환경과 node.js 환경은 같은 자바스크립트 코드를 작성해도 다르게 동작할 수 있다. 

- 자바스크립트 엔진은 코드 실행 전 실행 컨텍스트를 생성
- 실행 컨텍스트는 두 단계를 통해 생성 
- 생성 단계에서 자바스크립트 엔진은 변수 선언을 읽고
- 실행 단계에서 자사스크립트 엔진은 변수 값을 할당 

* 렉시컨 환경 (Lexical Environment)
- 함수의 렉스컬 환경은 함수가 사용하는 변수들을 둘러싼 환경을 의미
- 특정 변수의 값은 함수의 렉시컬 환경 안에서 찾을 수 있다. 
- 렉시컬 환경은 실행 컨텍스트 안에 정의된 Variable Object로 이해할 수 있다. 
- 자바스크립트 엔진은 생성 단계에서 함수 선언문, 함수 표현식, 변수 등을 읽어 실행 컨텍스트에 저장
- 변수의 경우, 실행 컨텍스트의 렉시컬 환경을 구성
- 함수 선언문 외에 변수는 값이 저장되지 않음. (함수는 값이 저장 / 변수는 값이 저장되지 않음)
- 자바스크립트 엔진은 변수에 값을 할당하는 구문을 만나면 실행 컨텍스트에 값을 저장
- 그외 코드를 한 줄씩 읽어나가며 실행 

* 자바스크립트 코드 실행 
- 시작 -> 생성단계 (실행 컨텍스트 생성) -> 실행단계 (변수값 할당, 코드실행) -> 종료

2. 자바스크립트 Hoisting
자바스크립트가 변수를 어떻게 선언하고 할당, 참조하는지 알아야 한다. 

* 코드 실행시 변수처리 
- 자바스크립트 엔진이 코드를 읽으면, 생성 단계에서 실행 컨텍스트를 생성
- 이때 함수 선언문은 실행 단계에서 함수 전체가 실행 커넥스트에 저장
- var 변수는 저장시 undefined로 초기화 (undefined는 하나의 값이다)
- let, const는 초기화되지 않음 (초기화 되지 않으면 접근이 불가능)

* Hoisting
- Hoisting은 변수가 선언된 시점보다 앞에서 사용되는 현상
- var변수가 생성 단계에서 undefined로 초기화 되는 것이 원인
- 함수는 생성 단계에서 함수 전체가 저장되므로 뒤에서 선언되어도 호출 가능
- let, const 변수는 생성단계에서 초기화되지 않음
- 선언문 이전에 접근시 ReferenceError가 발생
- 이 경계를 Temporal Dead Zon(TDX)라고 함
- 따라서, let, const는 hoisting이 발생하지 않음.

* var, let, const
- var, let, const는 모두 변수를 선언하는 키워드
- var, let은 변수에 재할당 가능, const는 재할당 불가능
- var은 함수 스코프, let과 const는 블록 스코프 변수이다.


3. 자바스크립트 내장객체1
* 자바스크립트의 내장 객체
- 자바스크립트는 여러 용도에 활용하는 객체는 내장
- 숫자 다루기, 문자 다루기, 날짜 다루기, JSON 객체 다루기등에 유용한 객체를 제공
- 핵심 내장 객체들의 기능을 이해하면 실제 프로젝트에서 유용하게 활용

* globalThis
- globalThis는 전역 객체는 지칭하는 변수
- 전역 객체는 환경에 따라 다름
- 브라우저 환경은 window, node 환경은 global객체를 지칭
- globalThis는 환경별 차이를 통일하여 하나의 변수로 서로 다른 전역 객체를 가르킨다. 
- globalThis는 브라우저 환경에서 window 객체와 같다. 

* window
- DOM document를 포함하는 창을 나타내는 객체
- 전역 스코프에 선언된 변수는 모두 window의 property가 됨
- 현재 창의 정보를 얻거나, 창을 조작

* document
- 브라우저에 로드된 웹페이지
- 문서의 title, URL등의 정보 얻음
- element생성, 검색등의 기능 제공
- createElement, createTextNode는 동적으로 원소를 생성
- 이를 이용해 자바스크립트만으로 원소를 구성할 수 


4. 자바스크립트 내장 객체2
*numver, NaN
- 자바스크립트의 number 원시타입을 감싸는 객체
- 유의미한 상수값, 숫자를 변환하는 메서드등을 제공
- NaN - Not a Number를 나타내는 객체
- isNaN() : 전역함수로, 입력값을 숫자로 변환했을때 NaN이 되는지를 검사
- isNaN과 함께 활용하여, 유저의 입력을 포맷팅할 수 있음
- formatNumber는 isNaN 함수로 빈 문자열, 잘못된 입력등의 경우를 처리 


* Math 
- 기본적인 수학 연산, 메서드, 상수를 다루는 객체
- BigInt 타입과 호환되지 않고, Number 타입만 인자로 다룬다. 
- Math.max / Math.min / Math.floor / Math.random /

5. 자바스크립트 내장 객체3
* Data 
- 특정 시점의 날짜를 표현하기 위한 객체
- 날짜와 관련된 작업을 하기 위한 여러 메서지를 포함
- Data.getDay() : 0~6까지로 요일을 구분 / 년도, 월, 일, 시, 분, 초, 밀리초등을 구할 수 있음
- setData() : 시간을 설정
- getTime() : 시간을 밀리초 단위로 반환 / 1970.1.1 시점부터 흐른 시간

* String, JSON
- 자바스크립트의 문자열 원시 타입의 래퍼 객체
- 문자열을 조작하기 위한 여러 메서드를 포함
- JSON-JSON 객체와 관련된 메서드를 담은 객체 
- trin(), toUpperCase(), includes(), split(), replace(), indexOf()
- JSON.stringify)





